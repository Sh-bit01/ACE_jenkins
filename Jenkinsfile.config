pipeline {
    agent any

    environment {
    	IP = '192.168.1.98'
    	PORT = '4415'
    	ASHAR_EG = 'Server_1'
        REPO_URL = 'https://github.com/Sh-bit01/ACE_jenkins.git'
        REPO_NAME = 'ACE_jenkins'
        BASE_DIR = '/home/ubuntu/jenkins'
        LOG  = '/home/ubuntu/jenkins/log'
        NODE = 'ACE'
	EG = 'jenkins'
	
	MQSI_REGISTRY= '/var/mqsi'
	MQSI_EXTENSIONS_PATH= '/var/mqsi/extensions/12.0.2'
	MQSI_WORKPATH='/var/mqsi'
	
	MQSI_WEBADMIN_HOME = '/opt/ace-12.0.2.0/server/webadmin'
        PROSPECTIVE_MQSI_BASE_FILEPATH = '/opt/ace-12.0.2.0'
        MQSI_JARPATH = '/opt/ace-12.0.2.0/common/classes:/opt/ace-12.0.2.0/server/classes:/opt/ace-12.0.2.0/server/messages'
        MQSI_BASE_FILEPATH = '/opt/ace-12.0.2.0'
        MQSI_JREPATH = '/opt/ace-12.0.2.0/common/jdk/jre'
        MQSI_CATALINA_HOME = '/opt/ace-12.0.2.0/server/catalina'
        MQSI_EXMLTCONFIGPATH = '/opt/ace-12.0.2.0/server/exmltConfig'
        MQSI_LILPATH = '/var/mqsi/extensions/12.0.2/server/lil:/opt/ace-12.0.2.0/server/lil:/opt/ace-12.0.2.0/server/jplugin'
        MQSI_SECURITY_PROVIDER_PATH = '/opt/ace-12.0.2.0/server/SecurityProviders'
        MQSI_JDKPATH = '/opt/ace-12.0.2.0/common/jdk'
        MIBDIRS = '/opt/ace-12.0.2.0/server/snmp-mib'
        MQSI_NODE_PATH = '/opt/ace-12.0.2.0/common/node/lib/node_modules:/opt/ace-12.0.2.0/server/nodejs/node_modules:/opt/ace-12.0.2.0/server/nodejs:/var/mqsi/node_modules'
        MQSI_FILEPATH = '/opt/ace-12.0.2.0/server'
        CLASSPATH = '/opt/ace-12.0.2.0/server/messages:/opt/ace-12.0.2.0/common/classes:/opt/ace-12.0.2.0/server/classes:/opt/ace-12.0.2.0/common/jnr/lib/jnr-x86asm-1.0.2.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-unixsocket-0.23.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-posix-3.0.50.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-ffi-2.1.10.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-enxio-0.21.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-constants-0.9.12.jar:/opt/ace-12.0.2.0/common/jnr/lib/jnr-a64asm-1.0.0.jar:/opt/ace-12.0.2.0/common/jnr/lib/jffi-1.2.19-native.jar:/opt/ace-12.0.2.0/common/jnr/lib/jffi-1.2.19.jar:/opt/ace-12.0.2.0/common/jnr/lib/asm-7.0.jar:/opt/ace-12.0.2.0/common/jackson/lib/snakeyaml-1.29.jar:/opt/ace-12.0.2.0/common/jackson/lib/jackson-datatype-jsr310-2.12.4.jar:/opt/ace-12.0.2.0/common/jackson/lib/jackson-dataformat-yaml-2.12.4.jar:/opt/ace-12.0.2.0/common/jackson/lib/jackson-core-2.12.4.jar:/opt/ace-12.0.2.0/common/jackson/lib/jackson-databind-2.12.4.jar:/opt/ace-12.0.2.0/common/jackson/lib/jackson-annotations-2.12.4.jar:/opt/ace-12.0.2.0/common/classes/IntegrationAPI.jar:/opt/ace-12.0.2.0/server/classes/brokerutil.jar:/var/mqsi/common/wsrr'
        LD_LIBRARY_PATH = '/opt/ace-12.0.2.0/common/jdk/jre/lib/amd64:/opt/ace-12.0.2.0/common/jdk/jre/lib/amd64/classic:/opt/ace-12.0.2.0/common/jdk/jre/lib/icc:/opt/ace-12.0.2.0/common/jdk/lib/default:/opt/ace-12.0.2.0/common/jdk/lib/server:/opt/ace-12.0.2.0/common/jdk/lib:/opt/ace-12.0.2.0/ie02/lib:/var/mqsi/extensions/12.0.2/server/lib:/var/mqsi/extensions/12.0.2/lib:/opt/ace-12.0.2.0/server/xml4c/lib:/opt/ace-12.0.2.0/server/lib:/opt/ace-12.0.2.0/server/bin:/opt/ace-12.0.2.0/server/ODBC/drivers/lib:/opt/ace-12.0.2.0/server/xlxpc/lib:/opt/ace-12.0.2.0/server/dfdlc/lib'
        ODBCSYSINI = '/opt/ace-12.0.2.0/ie02/etc'
        NLSPATH = '/opt/ace-12.0.2.0/server/messages/%L/%N:/opt/ace-12.0.2.0/server/messages/En_US/%N'
        PATH = '/opt/ace-12.0.2.0/common/jdk/jre/bin:/var/mqsi/extensions/12.0.2/server/bin:/var/mqsi/extensions/12.0.2/bin:/opt/ace-12.0.2.0/server/bin:/opt/ace-12.0.2.0/common/node/bin:/opt/ace-12.0.2.0/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'
        IE02_PATH = '/opt/ace-12.0.2.0/ie02'
        TOOLS_FILEPATH = '/opt/ace-12.0.2.0/tools'
    }

    stages {
        stage('Checkout') {
            steps {
                dir("${env.BASE_DIR}/ACE_jenkins") {
                    // If you still want to manually check this folder
                    script {
                        if (fileExists("${env.BASE_DIR}/ACE_jenkins")) {
                            echo "Directory ACE_jenkins exists. Pulling latest changes..."
                            sh "cd ${env.BASE_DIR}/ACE_jenkins && git pull"
                        } else {
                            echo "Directory ACE_jenkins not found. Cloning repository..."
                            sh "git clone ${env.REPO_URL} ${env.BASE_DIR}/ACE_jenkins"
                        }
                    }
                }
            }
        }
        



       
        stage('Prepare for Deploy') {
  steps {
    script {
      def lastLine = sh(
        script: "tail -n 1 ${env.BASE_DIR}/ACE_jenkins/DeployList.config",
        returnStdout: true
      ).trim()

      // Split the line by '|', trim each entry, and fill missing fields with null
      def fields = lastLine.split('\\|').collect { it.trim() }
      while (fields.size() < 4) {
        fields << null  // Fill missing values with null
      }

      // Assign to environment variables
      env.APP_NAME = fields[0] ?: null
      env.PROJECT_NAME = fields[1] ?: null
      env.LIBRARY_NAME = fields[2] ?: null
      env.POLICY_NAME = fields[3] ?: null

      echo "App Name: ${env.APP_NAME}"
      echo "Project Name: ${env.PROJECT_NAME}"
      echo "Library Name: ${env.LIBRARY_NAME}"
      echo "Policy Name: ${env.POLICY_NAME}"

      // Example: set DEPLOY_PATH based on the app name or other logic
      env.DEPLOY_PATH = ${env.APP_NAME}
    }

    sh """
      cp -r ${env.DEPLOY_PATH} ${env.BASE_DIR}/Build/
    """
  }
}


stage('Create BAR File') {
  steps {
    script {
      // Build the BAR command dynamically
      def barCommand = "/opt/ace-12.0.2.0/tools/mqsicreatebar -data ${env.BASE_DIR}/${env.REPO_NAME}"
      if (env.APP_NAME)      { barCommand += " -a ${env.APP_NAME}" }
      if (env.PROJECT_NAME)  { barCommand += " -p ${env.PROJECT_NAME}" }
      if (env.LIBRARY_NAME)  { barCommand += " -l ${env.LIBRARY_NAME}" }
      if (env.POLICY_NAME)   { barCommand += " -x ${env.POLICY_NAME}" }
      barCommand += " -b ${env.BASE_DIR}/Source/${env.DEPLOY_PATH}/${env.DEPLOY_PATH}.bar"

      echo "Running BAR creation command:\n${barCommand}"

      // Execute with interpolated shell block
      sh """
        Xvfb :99 -screen 0 1024x768x24 &
        export DISPLAY=:99
        cd ${env.BASE_DIR}/Build/
        ${barCommand}
      """
    }
  }
}

        
        stage('Create EG') {
            steps {
                sh """
                	echo "create eg"
                """
            }
        }
        
        stage('configuration') {
        parallel{
        
                
        stage('SSL config') {
            steps {
                sh """
                	echo "create ssh"
                """
            }
        }
        
         stage('Db Config') {
            steps {
                sh """
                	echo "create DB"
                """
            }
        }
        
         stage('MQ Config') {
            steps {
                sh """
                	echo "create Mq"
                """
            }
        }
        
              
        
        }
       }
       
       
       stage('deploying on local') {
            steps {
                sh """
		/opt/ace-12.0.2.0/server/bin/mqsideploy ${env.NODE} -e ${env.EG} -a ${env.BASE_DIR}/Source/${env.DEPLOY_PATH}/${env.DEPLOY_PATH}.bar -v ${env.LOG}/local.log
                """
            }
        }
       
       
       
       
       
       
                 
    }
}

